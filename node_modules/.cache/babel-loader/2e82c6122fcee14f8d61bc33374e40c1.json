{"ast":null,"code":"import _toConsumableArray from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/gokberk/Desktop/nft-bazaar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/gokberk/Desktop/nft-bazaar/src/components/Explore.jsx\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport nftBazaar from '../abis/nftBazaar.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                //modern browsers\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  //no ethereum provider\n                  console.log('No ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, nft;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log(this.state.account);\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = nftBazaar.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                abi = nftBazaar.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                }); //call the total supply of CryptoBirdz\n\n                _context3.next = 17;\n                return contract.methods.totalSupply().call();\n\n              case 17:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                console.log(this.state.totalSupply); //set up an array to keep track of tokens\n\n                i = 1;\n\n              case 21:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 24;\n                return contract.methods.nfts(i - 1).call();\n\n              case 24:\n                nft = _context3.sent;\n                this.setState({\n                  //spread operation for concatenating\n                  minted_nfts: [].concat(_toConsumableArray(this.state.minted_nfts), [nft])\n                });\n\n              case 26:\n                i++;\n                _context3.next = 21;\n                break;\n\n              case 29:\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert('Smart contract not deployed');\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  //While minting we are senfing information and we need to specify the account\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (nft_mint) {\n      window.ethereum.enable();\n\n      _this.state.contract.methods.mint(nft_mint).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          //spread operation for concatenating\n          minted_nfts: [].concat(_toConsumableArray(_this.state.minted_nfts), [nft_mint])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      minted_nfts: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container-filled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"background-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, this.state.minted_nfts.map(function (nft_mint, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(MDBCardImage, {\n          src: nft_mint,\n          position: \"top\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          style: {\n            color: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"NFT Token\"), React.createElement(MDBCardText, {\n          style: {\n            color: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"NFT A\\xE7\\u0131klamas\\u0131\"), React.createElement(MDBBtn, {\n          href: nft_mint,\n          className: \"btn btn-light\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"\\u0130ndir\")))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/gokberk/Desktop/nft-bazaar/src/components/Explore.jsx"],"names":["React","Component","Web3","detectEthereumProvider","nftBazaar","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","state","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","nfts","nft","minted_nfts","alert","props","mint","nft_mint","ethereum","enable","send","from","once","receipt","map","key","maxWidth","marginRight","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport nftBazaar from '../abis/nftBazaar.json'\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\nimport './App.css';\n\nclass App extends Component{\n    async componentDidMount(){\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n    //detect ethereum provider\n    async loadWeb3(){\n        const provider = await detectEthereumProvider();\n\n        //modern browsers\n        if(provider){\n            console.log('ethereum wallet is connected')\n            window.web3 = new Web3(provider)\n        } else{\n            //no ethereum provider\n            console.log('No ethereum wallet detected')\n        }\n    }\n\n    async loadBlockchainData(){\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        this.setState({account: accounts[0]})\n        console.log(this.state.account)\n\n        const networkId = await web3.eth.net.getId()\n        const networkData = nftBazaar.networks[networkId]\n        \n        if(networkData){\n            const abi = nftBazaar.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address)\n            this.setState({contract:contract})\n\n            //call the total supply of CryptoBirdz\n\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply:totalSupply})\n\n            console.log(this.state.totalSupply)\n\n            //set up an array to keep track of tokens\n\n            for(let i = 1; i <= totalSupply; i++){\n                const nft = await contract.methods.nfts(i - 1).call()\n                this.setState({\n                    //spread operation for concatenating\n                    minted_nfts:[...this.state.minted_nfts, nft]\n                })\n            }\n\n        } else{\n            window.alert('Smart contract not deployed')\n        }\n    }\n\n    mint = (nft_mint) =>{\n        window.ethereum.enable()\n        this.state.contract.methods.mint(nft_mint).send({from:this.state.account})\n        .once('receipt', (receipt) =>{\n            this.setState({\n                //spread operation for concatenating\n                minted_nfts:[...this.state.minted_nfts, nft_mint]\n            })\n        })\n    }\n\n    //While minting we are senfing information and we need to specify the account\n\n    constructor(props){\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            minted_nfts: []\n        }\n    }\n\n    render(){\n        return(\n            <div className='container-filled'>\n                <div className='background-image'></div>\n                <div className='container-fluid mt-1'>\n                        <div className='row textCenter'>\n                            {this.state.minted_nfts.map((nft_mint, key)=>{\n                                return(\n                                    <div>\n                                        <div>\n                                            <MDBCard className='token img' style={{maxWidth:'22rem'}}>\n                                                <MDBCardImage src={nft_mint} position='top' style={{marginRight:'4px'}}/>\n                                                <MDBCardBody>\n                                                    <MDBCardTitle style={{color:'white'}}>NFT Token</MDBCardTitle>\n                                                    <MDBCardText style={{color:'white'}}>NFT Açıklaması</MDBCardText>\n                                                    <MDBBtn href={nft_mint} className='btn btn-light'>İndir</MDBBtn>\n                                                </MDBCardBody>\n                                            </MDBCard>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}